#include "Menu.h"
#include <iostream>
#include <string>
#include "common.h"

static std::string ReadLineLocked(const std::string &prompt = "") {
    std::lock_guard<std::mutex> lock(io_mutex);
    if (!prompt.empty()) std::cout << prompt;
    std::string line;
    std::getline(std::cin, line);
    return line;
}

void Menu::ClearScreen() {
    #ifdef _WIN32
        system("cls");
    #else
        system("clear");
    #endif
}

void Menu::displayMainMenu() {
    std::cout << "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << std::endl;
    std::cout << "‚ïë      –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨    ‚ïë" << std::endl;
    std::cout << "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£" << std::endl;
    std::cout << "‚ïë 1. –í—Ö–æ–¥                  ‚ïë" << std::endl;
    std::cout << "‚ïë 2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è           ‚ïë" << std::endl;
    std::cout << "‚ïë 3. –í—ã—Ö–æ–¥                 ‚ïë" << std::endl;
    std::cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << std::endl;
}

void Menu::displayUserMenu() {
    std::cout << "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << std::endl;
    std::cout << "‚ïë    –ú–ï–ù–Æ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø     ‚ïë" << std::endl;
    std::cout << "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£" << std::endl;
    std::cout << "‚ïë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " << std::left;
    std::cout.width(10); 
    if (current_user.length() > 10) {
        std::cout << current_user.substr(0, 7) + "...";
    } else {
        std::cout << current_user;
    }
    std::cout << "‚ïë" << std::endl;
    std::cout << "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£" << std::endl;
    std::cout << "‚ïë 1. –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç         ‚ïë" << std::endl;
    std::cout << "‚ïë 2. –û–±—â–∏–π —á–∞—Ç             ‚ïë" << std::endl;
    std::cout << "‚ïë 3. –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π     ‚ïë" << std::endl;
    std::cout << "‚ïë 4. –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π  ‚ïë" << std::endl;
    std::cout << "‚ïë 5. –í—ã—Ö–æ–¥                 ‚ïë" << std::endl;
    std::cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << std::endl;
}

void Menu::displayPrivateChatHeader(const std::string& receiver) {
    ClearScreen();
    std::cout << "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << std::endl;
    std::cout << "‚ïë     –ü–†–ò–í–ê–¢–ù–´–ô –ß–ê–¢        ‚ïë" << std::endl;
    std::cout << "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£" << std::endl;
    std::cout << "‚ïë –í—ã -> " << std::left;
    if (receiver.length() > 16) {
        std::cout.width(16); std::cout << receiver.substr(0, 13) + "...";
    } else {
        std::cout.width(16); std::cout << receiver;
    }
    std::cout << "‚ïë" << std::endl;
    std::cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << std::endl;
    std::cout << "–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥" << std::endl;
    std::cout << "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" << std::endl;
}

void Menu::displayPublicChatHeader() {
    ClearScreen();
    std::cout << "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << std::endl;
    std::cout << "‚ïë       –û–ë–©–ò–ô –ß–ê–¢          ‚ïë" << std::endl;
    std::cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << std::endl;
    std::cout << "–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥" << std::endl;
    std::cout << "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" << std::endl;
}

void Menu::displayHelpCommands(bool isPrivateChat) {
    std::lock_guard<std::mutex> lock(io_mutex);
    std::cout << "\nüìã –ö–û–ú–ê–ù–î–´ –ß–ê–¢–ê:" << std::endl;
    std::cout << "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" << std::endl;
    
    if (isPrivateChat) {
        std::cout << "/exit    - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é" << std::endl;
        std::cout << "/history - –∏—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏" << std::endl;
        std::cout << "/help    - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É" << std::endl;
    } else {
        std::cout << "/exit    - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é" << std::endl;
        std::cout << "/history - –æ–±—â–∞—è –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞" << std::endl;
        std::cout << "/users   - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" << std::endl;
        std::cout << "/help    - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É" << std::endl;
        std::cout << "/quit    - –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" << std::endl;
    }
    std::cout << "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" << std::endl;
}

bool Menu::handleLogin(Client& client) {
    std::string login = ReadLineLocked("–õ–æ–≥–∏–Ω: ");
    if (login.empty()) {
        std::lock_guard<std::mutex> lock(io_mutex);
        std::cout << "–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!" << std::endl;
        return false;
    }

    std::string password = ReadLineLocked("–ü–∞—Ä–æ–ª—å: ");
    if (password.empty()) {
        std::lock_guard<std::mutex> lock(io_mutex);
        std::cout << "–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!" << std::endl;
        return false;
    }

    if (client.sendAUTH(login, password)) {
        current_user = login;
        std::lock_guard<std::mutex> lock(io_mutex);
        std::cout << "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!" << std::endl;
        return true;
    } else {
        std::lock_guard<std::mutex> lock(io_mutex);
        std::cout << "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!" << std::endl;
        return false;
    }
}

bool Menu::handleRegistration(Client& client) {
    std::string login = ReadLineLocked("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ");
    if (login.empty()) {
        std::lock_guard<std::mutex> lock(io_mutex);
        std::cout << "–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!" << std::endl;
        return false;
    }

    if (login.find(' ') != std::string::npos) {
        std::lock_guard<std::mutex> lock(io_mutex);
        std::cout << "–õ–æ–≥–∏–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã!" << std::endl;
        return false;
    }

    std::string name = ReadLineLocked("–í–≤–µ–¥–∏—Ç–µ –∏–º—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–Ω): ");
    if (name.empty()) {
        name = login; // –ï—Å–ª–∏ –∏–º—è –Ω–µ –≤–≤–µ–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–Ω
    } else if (name.find(' ') != std::string::npos) {
        std::lock_guard<std::mutex> lock(io_mutex);
        std::cout << "–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã!" << std::endl;
        return false;
    }

    std::string password = ReadLineLocked("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ");
    if (password.empty()) {
        std::lock_guard<std::mutex> lock(io_mutex);
        std::cout << "–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!" << std::endl;
        return false;
    }

    if (client.sendRegister(login, name, password)) {
        std::lock_guard<std::mutex> lock(io_mutex);
        std::cout << "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!" << std::endl;
        return true;
    } else {
        std::lock_guard<std::mutex> lock(io_mutex);
        std::cout << "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏! –í–æ–∑–º–æ–∂–Ω–æ, –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç." << std::endl;
        return false;
    }
}

std::string Menu::selectUserFromList(const std::vector<std::string>& users) {
    std::vector<std::string> availableUsers;
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ
    for (const auto& user : users) {
        if (user != current_user) {
            availableUsers.push_back(user);
        }
    }
    
    if (availableUsers.empty()) {
        std::lock_guard<std::mutex> lock(io_mutex);
        std::cout << "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —á–∞—Ç–∞!" << std::endl;
        return "";
    }
    
    std::lock_guard<std::mutex> lock(io_mutex);
    std::cout << "\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:" << std::endl;
    std::cout << "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" << std::endl;
    
    for (size_t i = 0; i < availableUsers.size(); ++i) {
        std::cout << " " << i + 1 << ". " << availableUsers[i] << std::endl;
    }
    
    std::string selection = ReadLineLocked("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–æ–º–µ—Ä –∏–ª–∏ –∏–º—è): ");
    if (selection.empty()) return "";

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ –Ω–æ–º–µ—Ä—É
    try {
        int idx = std::stoi(selection);
        if (idx >= 1 && idx <= static_cast<int>(availableUsers.size())) {
            return availableUsers[idx - 1];
        }
    } catch (...) {
        // –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–º–µ–Ω–∏
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∏–º–µ–Ω–∏
    for (const auto& user : availableUsers) {
        if (user == selection) {
            return user;
        }
    }
    
    std::cout << "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!" << std::endl;
    return "";
}

void Menu::handlePrivateChat(Client& client) {
    auto users = client.getListOfUsers();
    if (users.empty()) {
        std::lock_guard<std::mutex> lock(io_mutex);
        std::cout << "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!" << std::endl;
        ReadLineLocked("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...");
        return;
    }

    std::string receiver = selectUserFromList(users);
    if (receiver.empty()) return;

    displayPrivateChatHeader(receiver);
    client.requestPrivateHistory(receiver);

    while (true) {
        std::string message = ReadLineLocked(">> ");
        
        if (message.empty()) continue;
        
        if (message[0] == '/') {
            if (processCommand(client, message, receiver)) {
                break;
            }
            continue;
        }
        
        processPrivateMessage(client, receiver, message);
    }
}

void Menu::handlePublicChat(Client& client) {
    displayPublicChatHeader();
    client.requestHistory();

    while (true) {
        std::string message = ReadLineLocked(">> ");
        
        if (message.empty()) continue;
        
        if (message[0] == '/') {
            if (processCommand(client, message)) {
                break;
            }
            continue;
        }
        
        processPublicMessage(client, message);
    }
}

void Menu::processPrivateMessage(Client& client, const std::string& receiver, const std::string& message) {
    client.sendPrivate(current_user, receiver, message);
}

void Menu::processPublicMessage(Client& client, const std::string& message) {
    client.sendToAll(message);
}

bool Menu::processCommand(Client& client, const std::string& command, const std::string& context) {
    if (command == "/exit") {
        return true;
    } else if (command == "/help") {
        displayHelpCommands(!context.empty());
    } else if (command == "/history") {
        if (context.empty()) {
            client.requestHistory();
        } else {
            client.requestPrivateHistory(context);
        }
    } else if (command == "/users" && context.empty()) {
        auto users = client.getListOfUsers();
        std::lock_guard<std::mutex> lock(io_mutex);
        std::cout << "\n–û–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:" << std::endl;
        for (const auto& user : users) {
            std::cout << " ‚Ä¢ " << user << std::endl;
        }
    } else if (command == "/quit" && context.empty()) {
        client.disconnect();
        return true;
    } else {
        std::lock_guard<std::mutex> lock(io_mutex);
        std::cout << "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: " << command << std::endl;
    }
    return false;
}

int Menu::RunMenu(Client& client) {
    int choice = 0;
    bool shouldExit = false;
    
    do {
        ClearScreen();
        displayMainMenu();
        
        std::string input = ReadLineLocked("–í–∞—à –≤—ã–±–æ—Ä: ");
        try { 
            choice = std::stoi(input); 
        } catch (...) { 
            choice = -1; 
        }
        
        switch (choice) {
            case 1:
                if (handleLogin(client)) {
                    UserMenu(client);
                } else {
                    ReadLineLocked("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...");
                }
                break;
            case 2:
                if (handleRegistration(client)) {
                    std::lock_guard<std::mutex> lock(io_mutex);
                    std::cout << "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É." << std::endl;
                }
                ReadLineLocked("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...");
                break;
            case 3:
                shouldExit = true;
                break;
            default:
                std::lock_guard<std::mutex> lock(io_mutex);
                std::cout << "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!" << std::endl;
                ReadLineLocked("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...");
                break;
        }
    } while (!shouldExit);
    
    return 0;
}

int Menu::UserMenu(Client& client) {
    int choice = 0;
    bool shouldExit = false;
    
    do {
        ClearScreen();
        displayUserMenu();
        
        std::string input = ReadLineLocked("–í–∞—à –≤—ã–±–æ—Ä: ");
        try { 
            choice = std::stoi(input); 
        } catch (...) { 
            choice = -1; 
        }
        
        switch (choice) {
            case 1:
                handlePrivateChat(client);
                break;
            case 2:
                handlePublicChat(client);
                break;
            case 3:
                client.requestHistory();
                ReadLineLocked("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...");
                break;
            case 4:
                {
                    auto users = client.getListOfUsers();
                    std::lock_guard<std::mutex> lock(io_mutex);
                    std::cout << "\n–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:" << std::endl;
                    for (const auto& user : users) {
                        std::cout << " ‚Ä¢ " << user << std::endl;
                    }
                    ReadLineLocked("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...");
                }
                break;
            case 5:
                client.disconnect();
                shouldExit = true;
                break;
            default:
                std::lock_guard<std::mutex> lock(io_mutex);
                std::cout << "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!" << std::endl;
                ReadLineLocked("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...");
                break;
        }
    } while (!shouldExit);
    
    return 0;
}

int Menu::ShowAllMessages(Client& client) {
    handlePublicChat(client);
    return 0;
}